#BlueJ class context
comment0.params=
comment0.target=BD()
comment0.text=\n\ Construtor\ vazio\n
comment1.params=c\ m\ a\ v\ h
comment1.target=BD(java.util.HashMap,\ java.util.Map,\ java.util.Map,\ java.util.List,\ java.util.Set)
comment1.text=\n\ Construtor\ parametrizado\n\ @param\ c\ List<AtorInterface>\n\ @param\ m\ List<AtorInterface>\n\ @param\ v\ List<VeiculoInterface>\n\ @param\ h\ Set<Historico>\n
comment10.params=m
comment10.target=void\ setAdmins(java.util.Map)
comment11.params=v
comment11.target=void\ setVeiculos(java.util.List)
comment11.text=\n\ setVeiculos(List<VeiculoInterface>\ v\ -\ Modifica\ a\ lista\ de\ Veiculos\n\ @param\ v\ \:\ List<VeiculoInterface>\ v\n\ \n
comment12.params=h
comment12.target=void\ setHistorico(java.util.Set)
comment12.text=\n\ setHistorico(Set<Historico>\ v\ -\ Modifica\ a\ lista\ de\ historico\n\ @param\ v\ \:\ Set<Historico>\ v\n\ \n
comment13.params=
comment13.target=BDInterface\ clone()
comment14.params=obj
comment14.target=boolean\ equals(java.lang.Object)
comment14.text=\n\ A\ fun\u00E7\u00E3o\ equals\ recebe\ um\ Objeto\ gen\u00E9rico\ e\ verifica\ se\ \u00E9\ exatamente\ igual\ a\ uma\ BD.\n\ @param\ obj\ Objecto\ a\ comparar.\n
comment15.params=cs
comment15.target=boolean\ equalsClientes(java.util.Map)
comment15.text=\n\ M\u00E9todo\ que\ faz\ o\ equals\ dos\ Clientes\ \n
comment16.params=ms
comment16.target=boolean\ equalsMotoristas(java.util.Map)
comment16.text=\n\ M\u00E9todo\ que\ faz\ o\ equals\ dos\ Motoristas\ \n
comment17.params=atores1\ atores2
comment17.target=boolean\ equalsListAtores(java.util.Map,\ java.util.Map)
comment17.text=\n\ M\u00E9todo\ que\ faz\ o\ equals\ de\ uma\ lista\ de\ Atores,\ diferenciando\ se\ s\u00E3o\ Cliente\ ou\ Motorista\n
comment18.params=cs
comment18.target=boolean\ equalsAdmins(java.util.Map)
comment18.text=\n\ M\u00E9todo\ que\ faz\ o\ equals\ dos\ Admin\ \n\ ver\ este\ \n
comment19.params=veiculos1\ veiculos2
comment19.target=boolean\ equalsVeiculos(java.util.List,\ java.util.List)
comment19.text=\n\ Metodo\ auxiliar\ para\ fazer\ o\ equals\ da\ lista\ de\ Veiculos\n
comment2.params=bd
comment2.target=BD(BD)
comment2.text=\n\ Construtor\ por\ c\u00F3pia\ \n
comment20.params=vs
comment20.target=boolean\ equalsVeiculos(java.util.List)
comment21.params=
comment21.target=java.lang.String\ toString()
comment21.text=\n\ toString\n
comment22.params=
comment22.target=java.util.List\ listaDeMotoristas()
comment22.text=\n\ M\u00E9todo\ listaDeMotoristas\ -\ devolve\ uma\ lista\ com\ todos\ os\ motoristas\n
comment23.params=
comment23.target=java.util.List\ listaClientes()
comment23.text=\n\ M\u00E9todo\ que\ devolve\ a\ lista\ de\ todos\ os\ Clientes\ \n
comment24.params=
comment24.target=java.util.List\ listaVeiculos()
comment24.text=\n\ M\u00E9todo\ que\ devolve\ a\ lista\ de\ todos\ os\ Veiculos\ \n
comment25.params=cliente
comment25.target=void\ addCliente(Cliente)
comment25.text=\n\ M\u00E9todo\ addCliente\ -\ Adiciona\ um\ cliente\ \n\ @param\ cliente\n
comment26.params=motorista
comment26.target=void\ addMotorista(Motorista)
comment26.text=\n\ M\u00E9todo\ addMotorista\ -\ Adiciona\ um\ motorista\n\ @param\ motorista\n
comment27.params=veiculo
comment27.target=void\ addVeiculo(VeiculoInterface)
comment27.text=\n\ M\u00E9todo\ addVeiculo\ -\ Adiciona\ um\ veiculo\ \n\ @param\ veiculo\n
comment28.params=historico
comment28.target=void\ addHistorico(Historico)
comment28.text=\n\ M\u00E9todo\ addHistorico\ -\ Adiciona\ um\ historico\ \n\ @param\ historico\n
comment29.params=cliente
comment29.target=void\ removeCliente(Cliente)
comment29.text=\n\ removeCliente(Cliente\ cliente)\ -\ M\u00E9todo\ para\ remover\ um\ cliente\ da\ lista\n\ @param\ cliente\n
comment3.params=
comment3.target=java.util.Map\ getClientes()
comment3.text=\n\ getClientes()\ -\ Devolve\ um\ map\ contendo\ todos\ os\ clientes\ \n\ \n
comment30.params=veiculo
comment30.target=void\ removeVeiculo(Veiculo)
comment30.text=\n\ removeVeiculo(Veiculo\ veiculo)\ -\ M\u00E9todo\ para\ remover\ um\ veiculo\ da\ lista\n\ @param\ veiculo\n
comment31.params=motorista
comment31.target=void\ removeMotorista(Motorista)
comment31.text=\n\ removeMotorista(Motorista\ motorista)\ -\ M\u00E9todo\ para\ remover\ um\ motorista\ da\ lista\n\ @param\ motorista\n
comment32.params=nome
comment32.target=java.util.List\ findClientePeloNome(java.lang.String)
comment32.text=\n\ Devolve\ o\ primeiro\ Cliente\ com\ determinado\ email,\ quer\ esteja\ com\ mai\u00FAsculas\ ou\ min\u00FAsculas\ \n\ @param\ nome\n
comment33.params=
comment33.target=java.util.List\ matriculasReg()
comment33.text=\n\ devolve\ a\ lista\ de\ todas\ as\ matriculas\ registadas\ \n
comment34.params=email
comment34.target=AtorInterface\ getClienteComEmail(java.lang.String)
comment34.text=\n\ \ \ \ public\ boolean\ loginValido\ (String\ email,\ String\ password)\ {\n\ \ \ \ \ \ \ \ char\ caracter;\ \n\ \ \ \ \ \ \ \ AtorInterface\ cliente\ \=\ getClienteComEmail(email);\n\ \ \ \ \ \ \ \ if(cliente\!\=null\ &&\ cliente.getPassword().equals(AtorInterfaceesconderPassword(password,\ caracter\ ))){\n\ \ \ \ \ \ \ \ \ \ \ \ return\ true;\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ return\ false;\n}
comment35.params=email
comment35.target=AtorInterface\ getMotoristaComEmail(java.lang.String)
comment36.params=cliente
comment36.target=Motorista\ getMotoristaMaisPerto(AtorInterface)
comment4.params=
comment4.target=java.util.Map\ getMotoristas()
comment4.text=\n\ getMotoristas()\ -\ Devolve\ uma\ lista\ contendo\ todos\ os\ motoristas\ \n
comment5.params=
comment5.target=java.util.Map\ getAdmins()
comment5.text=\n\ getAdmins()\ -\ Devolve\ uma\ lista\ contendo\ todos\ os\ admins\ da\ aplica\u00E7\u00E3o\ \n
comment6.params=
comment6.target=java.util.List\ getVeiculos()
comment6.text=\n\ getVeiculos()-\ devolve\ uma\ lista\ contendo\ todos\ os\ Veiculos\ \n\ (Iterador\ Interno)\ \n
comment7.params=
comment7.target=java.util.Set\ getHistorico()
comment8.params=c
comment8.target=void\ setClientes(java.util.Map)
comment8.text=\n\ iterador\ externo\ \n\ \ \ \ \ \n\ \ \ \ public\ Map<String,\ Lugar>\ getLugares(){\n\ \ \ \ \ \ \ \ Map<String,\ Lugar>\ copia\ \=\ new\ HashMap<>();\ \n\ \ \ \ \ \ \ \ for(Map.Entry<String,Lugar>\ e\ \:\ lugares.entrySet()){\n\ \ \ \ \ \ \ \ \ \ \ \ copia.put(e.getKey(),\ e.getValue().clone());\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ return\ copia;\ \n\ \ \ \ \ \ \ \ //return\ lugares.entrySet().stream().collect(Collectors.toMap(e->egetValue().clone()));\n\ \ \ \ \n\ \ \ \ }\n
comment9.params=m
comment9.target=void\ setMotoristas(java.util.Map)
comment9.text=\n\ setMotoristas(Map<String,\ Motorista>\ m)\ -\ Modifica\ a\ lista\ de\ Motoristas\n\ @param\ m\ \:\ Map<String,\ Motorista>\n
numComments=37
